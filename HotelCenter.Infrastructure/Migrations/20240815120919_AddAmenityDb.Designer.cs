// <auto-generated />
using System;
using HotelCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelCenter.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240815120919_AddAmenityDb")]
    partial class AddAmenityDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelCenter.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            Name = "Özel Havuz"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 1,
                            Name = "Mikrodalga Fırın"
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 1,
                            Name = "Özel Balkon"
                        },
                        new
                        {
                            Id = 4,
                            HotelId = 1,
                            Name = "1 king yatak ve 1 çekyat"
                        },
                        new
                        {
                            Id = 5,
                            HotelId = 2,
                            Name = "Özel Dalma Havuzu"
                        },
                        new
                        {
                            Id = 6,
                            HotelId = 2,
                            Name = "Mikrodalga ve Mini Buzdolabı"
                        },
                        new
                        {
                            Id = 7,
                            HotelId = 2,
                            Name = "Özel Balkon"
                        },
                        new
                        {
                            Id = 8,
                            HotelId = 2,
                            Name = "king yatak veya 2 çift kişilik yatak"
                        },
                        new
                        {
                            Id = 9,
                            HotelId = 3,
                            Name = "Özel Havuz"
                        },
                        new
                        {
                            Id = 10,
                            HotelId = 3,
                            Name = "Jakuzi"
                        },
                        new
                        {
                            Id = 11,
                            HotelId = 3,
                            Name = "Özel Balkon"
                        });
                });

            modelBuilder.Entity("HotelCenter.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kraliyet tarzında tasarlanmış lüks ve konforlu bir villa.",
                            ImageUrl = "https://placehold.co/600x400",
                            Name = "Kraliyet Villası",
                            Occupancy = 4,
                            Price = 200.0,
                            Sqft = 550
                        },
                        new
                        {
                            Id = 2,
                            Description = "Özel havuzu ve modern olanaklarıyla premium bir villa deneyimi.",
                            ImageUrl = "https://placehold.co/600x401",
                            Name = "Premium Havuzlu Villa",
                            Occupancy = 4,
                            Price = 300.0,
                            Sqft = 550
                        },
                        new
                        {
                            Id = 3,
                            Description = "Geniş yaşam alanı ve özel havuzuyla lüks bir tatil villası.",
                            ImageUrl = "https://placehold.co/600x402",
                            Name = "Lüks Havuzlu Villa",
                            Occupancy = 4,
                            Price = 400.0,
                            Sqft = 750
                        });
                });

            modelBuilder.Entity("HotelCenter.Domain.Entities.HotelNumber", b =>
                {
                    b.Property<int>("Hotel_Number")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Hotel_Number");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelNumbers");

                    b.HasData(
                        new
                        {
                            Hotel_Number = 101,
                            HotelId = 1
                        },
                        new
                        {
                            Hotel_Number = 102,
                            HotelId = 1
                        },
                        new
                        {
                            Hotel_Number = 103,
                            HotelId = 1
                        },
                        new
                        {
                            Hotel_Number = 104,
                            HotelId = 1
                        },
                        new
                        {
                            Hotel_Number = 201,
                            HotelId = 2
                        },
                        new
                        {
                            Hotel_Number = 202,
                            HotelId = 2
                        },
                        new
                        {
                            Hotel_Number = 203,
                            HotelId = 2
                        },
                        new
                        {
                            Hotel_Number = 204,
                            HotelId = 2
                        },
                        new
                        {
                            Hotel_Number = 301,
                            HotelId = 3
                        },
                        new
                        {
                            Hotel_Number = 302,
                            HotelId = 3
                        },
                        new
                        {
                            Hotel_Number = 303,
                            HotelId = 3
                        },
                        new
                        {
                            Hotel_Number = 304,
                            HotelId = 3
                        });
                });

            modelBuilder.Entity("HotelCenter.Domain.Entities.Amenity", b =>
                {
                    b.HasOne("HotelCenter.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelCenter.Domain.Entities.HotelNumber", b =>
                {
                    b.HasOne("HotelCenter.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });
#pragma warning restore 612, 618
        }
    }
}
